import os
import logging
import sqlite3
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
conn = sqlite3.connect('schedule.db', check_same_thread=False)
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω—å —Ç–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
cursor.execute('''CREATE TABLE IF NOT EXISTS bookings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    username TEXT,
                    date TEXT,
                    time TEXT,
                    duration REAL)''')

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    role TEXT)''')

conn.commit()

# –ó–º—ñ–Ω–Ω—ñ –¥–ª—è —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω
WORKING_HOURS_START = 8
WORKING_HOURS_END = 20

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –∑ –∑–º—ñ–Ω–Ω–æ—ó —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("TOKEN")

# –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
def add_user(user_id, username, role):
    cursor.execute("INSERT OR IGNORE INTO users (user_id, username, role) VALUES (?, ?, ?)", (user_id, username, role))
    conn.commit()

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–º–∞–Ω–¥–∏ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    add_user(user.id, user.username, "student")
    keyboard = [["üîî –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏", "üìÖ –ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è", "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏"], ["/start"]]
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –í–∏ –º–æ–∂–µ—Ç–µ:\n"
        "üîî –ó–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ —á–∞—Å\n"
        "üìÖ –ú–æ—ó –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è\n"
        "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
def is_teacher(user_id):
    cursor.execute("SELECT role FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result and result[0] == "teacher"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–±–æ—á–∏—Ö –≥–æ–¥–∏–Ω
async def sethours(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if is_teacher(update.effective_user.id):
        try:
            start, end = map(int, context.args)
            global WORKING_HOURS_START, WORKING_HOURS_END
            WORKING_HOURS_START, WORKING_HOURS_END = start, end
            await update.message.reply_text(f"–†–æ–±–æ—á—ñ –≥–æ–¥–∏–Ω–∏ –∑–º—ñ–Ω–µ–Ω—ñ –Ω–∞ {start}:00 - {end}:00.")
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –ø–æ—á–∞—Ç–∫–æ–≤—É —ñ –∫—ñ–Ω—Ü–µ–≤—É –≥–æ–¥–∏–Ω—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: /sethours 8 20")
    else:
        await update.message.reply_text("–í–∏–±–∞—á—Ç–µ, —Ü—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –¥–ª—è –≤—á–∏—Ç–µ–ª—è.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
async def book(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è –∑–∞–Ω—è—Ç—Ç—è:", reply_markup=generate_day_keyboard())

def generate_day_keyboard():
    today = datetime.now()
    days = [
        (today + timedelta(days=i)).strftime("%d.%m.%y") + f" ({['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–ù–¥'][(today + timedelta(days=i)).weekday()]})"
        for i in range(30) if (today + timedelta(days=i)).weekday() != 6
    ]
    keyboard = [[day] for day in days]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

async def handle_day_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    selected_date = update.message.text.split()[0]
    context.user_data["selected_date"] = selected_date
    await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å —á–∞—Å:", reply_markup=generate_time_keyboard(selected_date))

def generate_time_keyboard(selected_date):
    today = datetime.now().strftime("%d.%m.%y")
    booked_times = get_booked_times(selected_date)
    hours = [f"{hour:02d}:00" for hour in range(WORKING_HOURS_START, WORKING_HOURS_END)]
    if selected_date == today:
        current_hour = datetime.now().hour
        hours = [time for time in hours if int(time.split(":")[0]) > current_hour]
    available_hours = [time for time in hours if time not in booked_times]
    keyboard = [[time] for time in available_hours]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–±—Ä–æ–Ω—å–æ–≤–∞–Ω–∏—Ö —á–∞—Å—ñ–≤ –¥–ª—è –¥–∞—Ç–∏
def get_booked_times(date):
    cursor.execute("SELECT time, duration FROM bookings WHERE date=?", (date,))
    bookings = cursor.fetchall()
    booked_times = []
    for time, duration in bookings:
        start_time = datetime.strptime(f"{date} {time}", "%d.%m.%y %H:%M")
        booked_interval = [start_time + timedelta(minutes=30 * i) for i in range(int(duration * 2))]
        booked_times.extend([time.strftime("%H:%M") for time in booked_interval])
    return booked_times

# –õ–æ–≥—ñ–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
async def handle_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    context.user_data["selected_time"] = update.message.text
    await update.message.reply_text("–û–±–µ—Ä—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:", reply_markup=generate_duration_keyboard())

def generate_duration_keyboard():
    durations = ["1 –≥–æ–¥", "1.5 –≥–æ–¥", "2 –≥–æ–¥"]
    keyboard = [[duration] for duration in durations]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –∑ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
async def handle_duration_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    selected_duration = update.message.text
    duration_hours = 1 if selected_duration == "1 –≥–æ–¥" else 1.5 if selected_duration == "1.5 –≥–æ–¥" else 2
    selected_time = context.user_data["selected_time"]
    selected_date = context.user_data["selected_date"]

    cursor.execute("SELECT * FROM bookings WHERE date=? AND time=?", (selected_date, selected_time))
    if cursor.fetchone():
        await update.message.reply_text("–¶–µ–π —á–∞—Å –≤–∂–µ –∑–∞–π–Ω—è—Ç–æ.")
        return

    cursor.execute("INSERT INTO bookings (user_id, username, date, time, duration) VALUES (?, ?, ?, ?, ?)",
                   (user.id, user.username, selected_date, selected_time, duration_hours))
    conn.commit()
    await update.message.reply_text(f"–í–∏ –∑–∞–±—Ä–æ–Ω—é–≤–∞–ª–∏ –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ {selected_date} –æ {selected_time} –Ω–∞ {selected_duration}.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –±—Ä–æ–Ω—é–≤–∞–Ω—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def view_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    cursor.execute("SELECT date, time, duration FROM bookings WHERE user_id=?", (user_id,))
    bookings = cursor.fetchall()

    if bookings:
        booking_text = "\n".join([f"{date} –æ {time} (–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {duration} –≥–æ–¥)" for date, time, duration in bookings])
        await update.message.reply_text(f"–í–∞—à—ñ –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è:\n{booking_text}")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    cursor.execute("SELECT id, date, time FROM bookings WHERE user_id=?", (user_id,))
    bookings = cursor.fetchall()

    if bookings:
        keyboard = [[f"{date} –æ {time}"] for _, date, time in bookings]
        keyboard.append(["–ù–∞–∑–∞–¥"])
        await update.message.reply_text("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞–Ω—è—Ç—Ç—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è:", reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True))
        context.user_data["cancel_bookings"] = bookings
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –±—Ä–æ–Ω—é–≤–∞–Ω—å.")

# –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
async def handle_cancellation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    selected_booking = update.message.text
    if selected_booking == "–ù–∞–∑–∞–¥":
        await start(update, context)
        return

    for booking_id, date, time in context.user_data.get("cancel_bookings", []):
        if f"{date} –æ {time}" == selected_booking:
            booking_datetime = datetime.strptime(f"{date} {time}", "%d.%m.%y %H:%M")
            time_difference = (booking_datetime - datetime.now()).total_seconds() / 3600
            if time_difference < 12:
                await update.message.reply_text("–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –º–æ–∂–ª–∏–≤–µ –Ω–µ –º–µ–Ω—à–µ, –Ω—ñ–∂ –∑–∞ 12 –≥–æ–¥–∏–Ω. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–ª–∞—Ç—ñ—Ç—å –æ—Ä–µ–Ω–¥—É –≤ —Ä–æ–∑–º—ñ—Ä—ñ 200 –≥—Ä–Ω –Ω–∞ –∫–∞—Ä—Ç–∫—É 5375411509960642.")
            else:
                cursor.execute("DELETE FROM bookings WHERE id=?", (booking_id,))
                conn.commit()
                await update.message.reply_text(f"–í–∞—à–µ –∑–∞–Ω—è—Ç—Ç—è –Ω–∞ {date} –æ {time} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
            break
    else:
        await update.message.reply_text("–ó–∞–±—Ä–æ–Ω—é–≤–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("sethours", sethours))
    application.add_handler(CommandHandler("book", book))
    application.add_handler(CommandHandler("schedule", schedule))
    application.add_handler(CommandHandler("cancel", cancel))
    application.add_handler(CommandHandler("view_bookings", view_bookings))
    application.add_handler(MessageHandler(filters.Regex(r"^\d{2}\.\d{2}\.\d{2}$"), handle_day_selection))
    application.add_handler(MessageHandler(filters.Regex(r"^\d{2}:\d{2}$"), handle_time_selection))
    application.add_handler(MessageHandler(filters.Regex(r"^\d+ –≥–æ–¥$"), handle_duration_selection))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏$"), handle_cancellation))

    application.run_polling()

if __name__ == '__main__':
    main()
